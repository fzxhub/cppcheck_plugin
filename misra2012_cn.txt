Appendix A Summary of guidelines
Rule 1.1
Rule <必要> 程序不得违反标准C语法和约束，并且不得超出具体实现的编译限制
Rule 1.2
Rule <建议> 不应该使用语言扩展
Rule 1.3
Rule <必要> 不得发生未定义或严重的未指定行为
Rule 2.1
Rule <必要> 项目不得包含不可达代码(unreachable code)
Rule 2.2
Rule <必要> 不得有无效代码(dead code)
Rule 2.3
Rule <建议> 项目不应包含未被使用的类型(type)声明
Rule 2.4
Rule <建议> 项目不应包含未被使用的类型标签(tag)声明
Rule 2.5
Rule <建议> 项目不应包含未被使用的宏(macro)声明
Rule 2.6
Rule <建议> 函数不应包含未被使用的执行标签(label)声明
Rule 2.7
Rule <建议> 函数中不应有未使用的变量
Rule 3.1
Rule <必要> 字符序列“/*”和“//”不得在注释中使用
Rule 3.2
Rule <必要> “//”注释中不得使用换行(即“//”注释中不得使用行拼接符“\”)
Rule 4.1
Rule <必要> 八进制和十六进制转译序列应有明确的终止识别标识
Rule 4.2
Rule <建议> 禁止使用三字母词(trigraphs)
Rule 5.1
Rule <必要> 外部标识符不得重名
Rule 5.2
Rule <必要> 同范围和命名空间内的标识符不得重名
Rule 5.3
Rule <必要> 内部声明的标识符不得隐藏外部声明的标识符
Rule 5.4
Rule <必要> 宏标识符不得重名
Rule 5.5
Rule <必要> 宏标识符与其他标识符不得重名
Rule 5.6
Rule <必要> typedef 名称应是唯一标识符
Rule 5.7
Rule <必要> 标签(tag)名称应是唯一标识符
Rule 5.8
Rule <必要> 全局(external linkage)对象和函数的标识符应是唯一的
Rule 5.9
Rule <建议> 局部全局(internal linkage)对象和函数的标识符应是唯一的
Rule 6.1
Rule <必要> 位域(位带)仅允许使用适当的类型来声明(位域成员类型限制)
Rule 6.2
Rule <必要> 单比特(single-bit)位域成员不可声明为有符号类型
Rule 7.1
Rule <必要> 禁止使用八进制常数
Rule 7.2
Rule <必要> 后缀“u”或“U”应使用于所有无符号的整数常量
Rule 7.3
Rule <必要> 小写字符“l”不得作为常量的后缀使用(仅可使用“L”)
Rule 7.4
Rule <必要> 除非对象的类型为“指向const char的指针”，否则不得将字符串常量赋值给该对象
Rule 8.1
Rule <必要> 类型须明确声明
Rule 8.2
Rule <必要> 函数类型应为带有命名形参的原型形式
Rule 8.3
Rule <必要> 对象或函数的所有声明均应使用相同的名称和类型限定符
Rule 8.4
Rule <必要> 全局(external linkage)的对象和函数，应有显式的合规的声明
Rule 8.5
Rule <必要> 全局对象或函数应在且只在一个文件中声明一次
Rule 8.6
Rule <必要> 全局标识符应在且只在一处定义
Rule 8.7
Rule <建议> 仅在本编译单元中调用的对象和函数，应定义成局部属性
Rule 8.8
Rule <必要> “static”修饰符应用在所有局部全局对象和局部函数(internal linkage)的声明中
Rule 8.9
Rule <建议> 若一个对象的标识符仅在一个函数中出现，则应将它定义在块范围内
Rule 8.10
Rule <必要> 内联函数应使用静态存储类声明
Rule 8.11
Rule <建议> 声明具有外部链接的数组时，应明确指定其大小
Rule 8.12
Rule <必要> 在枚举列表中，隐式指定的枚举常量的值应唯一
Rule 8.13
Rule <建议> 指针应尽可能指向const限定类型
Rule 8.14
Rule <必要> 不得使用类型限定符“restrict”
Rule 9.1
Rule <强制> 具有自动存储持续时间的对象(临时变量)的值在设置前不得读取
Rule 9.2
Rule <必要> 集合或联合体的初始化应括在花括号“{}”中
Rule 9.3
Rule <必要> 数组不得部分初始化
Rule 9.4
Rule <必要> 数组的元素不得被初始化超过一次
Rule 9.5
Rule <必要> 在使用指定初始化方式初始化数组对象的情况下，应明确指定数组的大小
Rule 10.1
Rule <必要> 操作数不得为不适当的基本类型
Rule 10.2
Rule <必要> 字符类型的表达式不得在加减运算中使用不当
Rule 10.3
Rule <必要> 表达式的值不得赋值给具有较窄基本类型或不同基本类型的对象
Rule 10.4
Rule <必要> 执行常规算术转换的运算符的两个操作数应有相同的基本类型
Rule 10.5
Rule <建议> 表达式的值不应(强制)转换为不适当的基本类型
Rule 10.6
Rule <必要> 复合表达式的值不得赋值给具有较宽基本类型的对象
Rule 10.7
Rule <必要> 如果将复合表达式用作执行常规算术转换的运算符的一个操作数，则另一个操作数不得具有更宽的基本类型
Rule 10.8
Rule <必要> 复合表达式的值不得转换为其他基本类型或更宽的基本类型
Rule 11.1
Rule <必要> 不得在指向函数的指针和任何其他类型的指针之间进行转换
Rule 11.2
Rule <必要> 不得在指向不完整类型的指针和其他任何类型间进行转换
Rule 11.3
Rule <必要> 不得在指向不同对象类型的指针之间执行强制转换
Rule 11.4
Rule <建议> 不得在指向对象的指针和整数类型之间进行转换
Rule 11.5
Rule <建议> 不得将指向 void 的指针转换为指向对象的指针
Rule 11.6
Rule <必要> 不得在指向 void 的指针和算术类型之间执行强制转换
Rule 11.7
Rule <必要> 不得在指向对象的指针和非整数算术类型之间执行强制转换
Rule 11.8
Rule <必要> 强制转换不得从指针指向的类型中删除任何 const 或 volatile 限定符
Rule 11.9
Rule <必要> 宏“NULL”是整数型空指针常量的唯一允许形式
Rule 12.1
Rule <建议> 表达式中运算符的优先级应明确
Rule 12.2
Rule <必要> 移位运算符的右操作数应在零到比左操作数基本类型的位宽度小一的范围内
Rule 12.3
Rule <建议> 不得使用逗号(,)运算符
Rule 12.4
Rule <建议> 常量表达式的求值不应导致无符号整数的回绕
Rule 13.1
Rule <必要> 初始化程序列表不得包含持久性副作用
Rule 13.2
Rule <必要> 在所有合法的评估命令下，表达式的值应与其持续的副作用相同
Rule 13.3
Rule <建议> 包含自增(++)或自减(--)运算符的完整表达式，除由自增或自减运算符引起的副作用外，不应有其他潜在的副作用
Rule 13.4
Rule <建议> 不得使用赋值运算符的结果
Rule 13.5
Rule <必要> 逻辑与(&&)和逻辑或(||)的右操作数不得含有持久性副作用
Rule 13.6
Rule <强制> sizeof运算符的操作数不得包含任何可能产生副作用的表达式
Rule 14.1
Rule <必要> 循环计数器的基本类型不能为浮点型
Rule 14.2
Rule <必要> for循环应为良好格式
Rule 14.3
Rule <必要> 控制表达式不得是值不变的
Rule 14.4
Rule <必要> if语句和循环语句的控制表达式的基本类型应为布尔型
Rule 15.1
Rule <建议> 不应使用 goto 语句
Rule 15.2
Rule <必要> goto语句仅允许跳到在同一函数中声明的稍后位置的标签
Rule 15.3
Rule <必要> goto语句引用的标签必须在goto语句所在代码块或包含该代码块的上级代码块中声明
Rule 15.4
Rule <建议> 最多只能有一个用于终止循环语句的 break 或 goto 语句
Rule 15.5
Rule <建议> 应仅在函数的末尾有单个函数出口
Rule 15.6
Rule <必要> 循环语句和选择语句的主体应为复合语句
Rule 15.7
Rule <必要> 所有的if…else if构造都应以else语句结束
Rule 16.1
Rule <必要> switch语句应格式正确
Rule 16.2
Rule <必要> switch标签只能出现在构成switch语句主体的复合语句的最外层
Rule 16.3
Rule <必要> 每一个switch子句(switch-clause)都应以无条件break语句终止
Rule 16.4
Rule <必要> 每个switch语句都应具有default标签
Rule 16.5
Rule <必要> Default标签应作为switch语句的第一个或最后一个switch标签
Rule 16.6
Rule <必要> 每个switch语句应至少有两个switch子句
Rule 16.7
Rule <必要> switch语句的控制表达式(switch-expression)的基本类型不得是布尔型
Rule 17.1
Rule <必要> 不得使用<stdarg.h>的功能
Rule 17.2
Rule <必要> 函数不得直接或间接调用自身(不得使用递归函数)
Rule 17.3
Rule <强制> 禁止隐式声明函数
Rule 17.4
Rule <强制> 具有非 void 返回类型的函数的所有退出路径都应为具有带有表达式的显式return语句
Rule 17.5
Rule <建议> 与数组型函数形参对应的函数入参应具有适当数量的元素
Rule 17.6
Rule <强制> 数组形参的声明不得在[]之间包含static关键字
Rule 17.7
Rule <必要> 非void返回类型的函数的返回值应该被使用
Rule 17.8
Rule <建议> 不应更改函数形参
Rule 18.1
Rule <必要> 指针操作数的算术运算应仅用于寻址与该指针操作数相同数组的元素
Rule 18.2
Rule <必要> 指针之间的减法应仅用于寻址同一数组元素的指针
Rule 18.3
Rule <必要> 关系运算符>，> =，<和<=不得应用于指针类型的对象，除非它们指向同一对象
Rule 18.4
Rule <建议> +，-，+=和-=运算符不得应用于指针类型的表达式
Rule 18.5
Rule <建议> 声明中最多包含两层指针嵌套
Rule 18.6
Rule <必要> 具有自动存储功能的对象的地址不得复制给在它的生命周期结束后仍会存在的另一个对象
Rule 18.7
Rule <必要> 不得声明灵活数组成员
Rule 18.8
Rule <必要> 不得使用可变长数组类型
Rule 19.1
Rule <强制> 不得将对象赋值或复制给重叠的对象
Rule 19.2
Rule <必要> 不得使用union关键字
Rule 20.1
Rule <建议> #include指令之前仅允许出现预处理指令或注释
Rule 20.2
Rule <必要> 头文件名中不得出现“'”、“"”、“\”、字符以及“/*”或“//”字符序列
Rule 20.3
Rule <必要> #include指令后须跟随<filename>或"filename"序列
Rule 20.4
Rule <必要> 宏不得与关键字同名
Rule 20.5
Rule <建议> 不应使用#undef
Rule 20.6
Rule <必要> 看起来像预处理指令的符号不得出现在宏参数内
Rule 20.7
Rule <必要> 宏参数展开产生的表达式应放在括号内
Rule 20.8
Rule <必要> #if或#elif预处理指令的控制表达式的计算结果应为0或1
Rule 20.9
Rule <必要> #if或#elif预处理指令的控制表达式中使用的所有标识符应在其评估前被#define定义
Rule 20.10
Rule <建议> 不应使用“#”和“##”预处理运算符
Rule 20.11
Rule <必要> 紧跟在“#”运算符之后的宏参数后面不得紧随“##”运算符operator
Rule 20.12
Rule <必要> 用作“#”或“##”运算符的操作数的宏参数，不得是本身需要进一步宏替换的操作数
Rule 20.13
Rule <必要> 以“#”作为第一个字符的一行代码应为有效的预处理指令
Rule 20.14
Rule <必要> 所有#else，#elif和#endif预处理程序指令都应和与其相关的#if，#ifdef或#ifndef指令位于同一文件中
Rule 21.1
Rule <必要> 不得将#define和#undef用于保留的标识符或保留的宏名称
Rule 21.2
Rule <必要> 不得声明保留的标识符或宏名称
Rule 21.3
Rule <必要> 不得使用<stdlib.h>中的内存分配和释放函数
Rule 21.4
Rule <必要> 不得使用标准头文件<setjmp.h>
Rule 21.5
Rule <必要> 不得使用标准头文件<signal.h>
Rule 21.6
Rule <必要> 不得使用标准库输入/输出函数
Rule 21.7
Rule <必要> 不得使用<stdlib.h>中的 atof、atoi、atol 和 atoll 函数
Rule 21.8
Rule <必要> 不得使用<stdlib.h>中的 abort, exit, getenv 和 system 函数
Rule 21.9
Rule <必要> 不得使用<stdlib.h>中的 bsearch 和 qsort 函数
Rule 21.10
Rule <必要> 不得使用标准库时间和日期功能
Rule 21.11
Rule <必要> 不得使用标准头文件<tgmath.h>
Rule 21.12
Rule <建议> 不得使用<fenv.h>的异常处理功能
Rule 22.1
Rule <必要> 通过标准库功能动态获取的所有资源均应明确释放
Rule 22.2
Rule <强制> 只有通过标准库函数分配的内存块才能释放
Rule 22.3
Rule <必要> 不得在不同的数据流上同时打开同一文件以进行读写访问
Rule 22.4
Rule <强制> 禁止尝试对以只读方式打开的流执行写操作
Rule 22.5
Rule <强制> 禁止反引用指向FILE对象的指针
Rule 22.6
Rule <强制> 关联的流关闭后，禁止再使用指向FILE的指针值